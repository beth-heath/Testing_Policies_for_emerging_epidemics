result <- w/(5 + w*e)
return(result)
}
curve (PPT_1, 0, 0.15)
curve(PPT_5, 0, 0.15, add=TRUE)
PPT_1 <-function(m){
a <- False_positive(1)
b <- False_negative(1)
inter = m*(1- False_negative(1)-False_positive(1))
w = round(sqrt(1/inter))
c<- (1-m)^w
d <- 1 - c
e <- (d*(1-b)) + ((1-d)*a)
result <- w/(1 + w*e)
return(result)
}
PTRF_1 <- function(m){
a = False_negative(1)
b = False_positive(1)
inter = m*(1-a-b)
w = sqrt(1/inter)
c<- (1-m)^w
d <- 1 - c
result <- d*(a + (1-a)*0.25)
return(result)
}
plot(PTRF_1, 0, 0.15)
PTRF_5 <- function(m){
a = False_negative(5)
b = False_positive(5)
inter = m*(1-a-b)
w = round(sqrt(5/inter))
c<- (1-m)^w
d <- 1 - c
result <- d*(a + (1-a)*0.02)
return(result)
}
PTRF_1 <- function(m){
a = False_negative(1)
b = False_positive(1)
inter = m*(1-a-b)
w = round(sqrt(1/inter))
c<- (1-m)^w
d <- 1 - c
result <- d*(a + (1-a)*0.02)
return(result)
}
curve(PTRF_1, from=0, to=0.15, col=3)
curve(PTRF_5, from=0, to=0.15, col=2,add=TRUE )
plot(PTRF_5, 0, 0.15)
plot(w_opt_1, 0, 0.01)
#infection rates going from the 10th August 2020 to October 2021 some of the days are missing
infection_rate <-c(0.05, 0.05, 0.05, 0.07, 0.11, 0.19, 0.21, 0.41, 0.62, 0.79, 1.04, 1.13, 1.20, 1.22, 1.16, 0.96, 0.88, 1.04,1.18,1.47,2.06,1.88,1.87,1.55,1.28,0.88,0.69,0.45,0.37,0.29,0.30,0.27,0.30,0.21,0.17, 0.10, 0.08, 0.07, 0.09, 0.09, 0.16, 0.18, 0.19, 0.22, 0.39, 0.61, 1.06, 1.36, 1.57, 1.32, 1.33, 1.28, 1.39, 1.41, 1.38, 1.28, 1.14, 1.21, 1.44, 1.63)
optimal_pools <- w_opt_1(infection_rate/100)
plot(optimal_pools, type="l")
#daily estimated infection rates going from 29th August to 9th October
infect_rat<-c(1.27, 1.26, 1.25, 1.24, 1.23, 1.22, 1.21, 1.20, 1.19, 1.18, 1.17, 1.16, 1.15, 1.14, 1.13, 1.12, 1.11, 1.11, 1.10, 1.10, 1.11, 1.12, 1.13, 1.15, 1.17, 1.20, 1.23, 1.26, 1.30, 1.33, 1.37, 1.41, 1.44, 1.48, 1.51, 1.54, 1.57, 1.60, 1.63, 1.66, 1.69, 1.73)
pols <- w_opt_1(infect_rat/100)
plot(pols, type="l", xlab="Number of days since the 29th August 2021", ylab="Optimal pool size")
#rates in May 2020-April 2021 with delay line
infect_rate<- c(0.24, 0.10, 0.06, 0.06, 0.09, 0.04, 0.03, 0.04, 0.05, 0.07, 0.05, 0.05, 0.05, 0.05, 0.05, 0.07,0.11, 0.19, 0.21)
infect_rate_plus <-c (0.27, 0.25, 0.24, 0.10, 0.06, 0.06, 0.09, 0.04, 0.03, 0.04, 0.05, 0.07, 0.05, 0.05, 0.05, 0.05, 0.05, 0.07,0.11)
pools <- w_opt_1(infect_rate/100)
pools_plus <- w_opt_1(infect_rate_plus/100)
plot(pools, type="l", ylab="Pools", xlab= "Number of weeks")
lines(pools_plus, type="l", col="green", lty=2, ylab="Pools", xlab= "Number of weeks")
#rates from May 2020-April 2021 for one replicate
infect_rate <-c(0.27, 0.25, 0.24, 0.10, 0.06, 0.06, 0.09, 0.04, 0.03, 0.04, 0.05, 0.07, 0.05, 0.05, 0.05, 0.05, 0.05, 0.07, 0.11, 0.19, 0.21, 0.41, 0.62, 0.79, 1.04, 1.13, 1.20, 1.22, 1.16, 0.96, 0.88, 1.04, 1.18, 1.47, 2.06, 1.88, 1.87, 1.55, 1.28, 0.88, 0.69, 0.45, 0.37, 0.29, 0.30, 0.27, 0.30, 0.21, 0.17, 0.10)
infect_rate_min <-c(0.17, 0.16, 0.11, 0.05, 0.02, 0.02, 0.04, 0.02, 0.01, 0.03, 0.03, 0.04, 0.03, 0.03, 0.03, 0.04, 0.04, 0.05, 0.09, 0.16, 0.18, 0.37, 0.57, 0.75, 0.98, 1.07, 1.14, 1.15, 1.10, 0.90, 0.83, 0.98, 1.12, 1.40, 1.96, 1.80, 1.79, 1.48, 1.21, 0.83, 0.64, 0.41, 0.33, 0.26, 0.26, 0.24, 0.26, 0.18, 0.14, 0.08)
infect_rate_max <-c(0.41, 0.38, 0.46, 0.18, 0.12, 0.13, 0.19, 0.08, 0.06, 0.06, 0.07, 0.10, 0.07, 0.07, 0.06, 0.07, 0.07, 0.10, 0.14, 0.23, 0.24, 0.45, 0.66, 0.84, 1.10, 1.20, 1.27, 1.29, 1.23, 1.01, 0.94, 1.10, 1.25, 1.54, 2.16, 1.96, 1.95, 1.63, 1.34, 0.94, 0.74, 0.50, 0.41, 0.33, 0.34, 0.31, 0.34, 0.24, 0.19, 0.12)
pool_1 <- w_opt_1 (infect_rate/100)
pool_1_min <-w_opt_1(infect_rate_min/100)
pool_1_max <- w_opt_1(infect_rate_max/100)
plot(pool_1, type="l", ylab="Pools", xlab="Number of weeks", ylim=c(0, 140))
lines(pool_1_min, col="green", lty=2)
lines(pool_1_max, col="red", lty=2)
legend("topright", c("Lower 95% interval", "Average", "Higher 95% interval"), cex=.8,pch=15,  col=c("green", "black","red") )
#rates from May 2020-April 2021 for two replicates
infect_rate <-c(0.27, 0.25, 0.24, 0.10, 0.06, 0.06, 0.09, 0.04, 0.03, 0.04, 0.05, 0.07, 0.05, 0.05, 0.05, 0.05, 0.05, 0.07, 0.11, 0.19, 0.21, 0.41, 0.62, 0.79, 1.04, 1.13, 1.20, 1.22, 1.16, 0.96, 0.88, 1.04, 1.18, 1.47, 2.06, 1.88, 1.87, 1.55, 1.28, 0.88, 0.69, 0.45, 0.37, 0.29, 0.30, 0.27, 0.30, 0.21, 0.17, 0.10)
pool_2 <- w_opt_2 (infect_rate/100)
plot(pool_2, type="l", ylab="Pools", xlab="Number of weeks")
PPT = function(w,m){
q = (1-m)^w
p = 1 - q
P_plus = p*(1-False_negative(1)) + (1-p)*False_positive(1)
result = w/(1 + P_plus*w)
return(result)
}
PTRF = function(w,m){
q = (1-m)^w
p = 1 - q
result = p*(False_negative(1) + (1-False_negative(1))*0.05)
return(result)
}
FPRF = function(w,m){
q = (1-m)^w
p = 1 - q
result = (1-p)*0.0012*False_positive(1) + p*(1-False_negative(1))*0.0012
return(result)
}
#differences in PPT with delay
NO_delay <-c(3.516828, 3.516828, 3.42472, 3.59599, 3.645021, 3.59599, 3.553896, 3.483297, 3.553896, 3.553896, 3.553896, 3.553896, 3.553896, 3.483297, 3.374188, 3.217798, 3.18695, 2.95277)
One_week_delay <- c(3.502068, 3.516828, 3.416666, 3.563911, 3.64135, 3.592828, 3.552052, 3.478851, 3.546764, 3.553896, 3.553896, 3.553896, 3.553896, 3.478851, 3.364742, 3.199822, 3.186957, 2.916752)
Two_week_delay<-c(3.411688, 3.502068, 3.416666, 3.587957, 3.593527, 3.59599, 3.542513, 3.468184, 3.553896, 3.546764, 3.553896, 3.553896, 3.553896, 3.478851, 3.340377, 3.156475, 3.159851, 2.916752)
Three_week_delay <-c(3.400822, 3.411688, 3.423762, 3.587957, 3.62493, 3.563911, 3.552052, 3.447129, 3.5520252, 3.553896, 3.546764, 3.553896, 3.553896, 3.478851, 3.340377, 3.102408, 3.109597, 2.823069)
Four_week_delay <-c(3.388978, 3.400822, 3.362818, 3.556903, 3.62493, 3.587957, 3.534912, 3.468184, 3.542513, 3.5520252, 3.553896, 3.546764, 3.553896, 3.478851, 3.340377, 3.102408, 3.049758, 2.727)
plot(NO_delay, type="l", ylim=c(2.5,3.7))
lines(One_week_delay, col="blue")
lines(Two_week_delay, col="green")
lines(Three_week_delay, col="purple")
lines(Four_week_delay, col="red")
diff_1 <- sum(NO_delay-One_week_delay)/18
diff_2 <- sum(NO_delay-Two_week_delay)/18
diff_3 <- sum(NO_delay-Three_week_delay)/18
diff_4 <- sum(NO_delay-Four_week_delay)/18
#differences in False negatives with delay
Neg_nodelay <- c(0.009835815, 0.009835815, 0.01191288, 0.008051735, 0.006987253, 0.008051735, 0.008917295, 0.01047441, 0.008917295, 0.008917295, 0.008917295, 0.008917295, 0.008917295, 0.01047441, 0.01328929, 0.01697486, 0.01870414, 0.02484604)
Neg_oneweek <-c(0.007660911, 0.009835815, 0.01462895, 0.005355571, 0.006059892, 0.009278851, 0.01002968, 0.0124975, 0.007520543, 0.008917295, 0.008917295, 0.008917295, 0.008917295, 0.0124075, 0.01629072, 0.02257543, 0.01870414, 0.03541832)
Neg_twoweek <-c(0.004960705, 0.007660911, 0.01462895, 0.006594527, 0.004025905, 0.008051735, 0.01155195, 0.01394425, 0.008917295, 0.007520543, 0.008917295, 0.008917295, 0.008917295, 0.0124075, 0.0192593, 0.02756618, 0.02484854, 0.03541832)
Neg_threeweek<-c(0.00479108, 0.004960705, 0.01141615, 0.006594527, 0.004959967, 0.005355571, 0.01002968, 0.01604327, 0.01002968, 0.008917295, 0.007520543, 0.008917295, 0.008917295, 0.0124075, 0.0192593, 0.03246291, 0.03031239, 0.04655698)
Neg_fourweek <-c(0.004621352, 0.00479108, 0.007409964, 0.00512972, 0.004959967, 0.006594527, 0.006679133, 0.01394425, 0.01155195, 0.01002968, 0.008917295, 0.007520543, 0.008917295, 0.0124075, 0.0192593, 0.03246291, 0.03566257, 0.05625537)
diffe_1 <- sum(Neg_nodelay-Neg_oneweek)/18
diffe_2 <- sum(Neg_nodelay-Neg_twoweek)/18
diffe_3 <- sum(Neg_nodelay-Neg_threeweek)/18
diffe_4 <- sum(Neg_nodelay-Neg_fourweek)/18
#differences in false positives with delay
Pos_nodelay <- c(0.000289737, 0.000289737, 0.000287569, 0.000291598, 0.000292709, 0.000291598, 0.000290695, 0.00028907, 0.000290695, 0.000290695, 0.000290695, 0.000290695, 0.000290695, 0.00028907, 0.000286133, 0.000282287, 0.000280483, 0.000274074)
Pos_oneweek <- c(0.000292006, 0.000289737, 0.000284735, 0.000294412, 0.000293677, 0.000290318, 0.000289534, 0.000287053, 0.000292153, 0.000290695, 0.000290695, 0.000290695, 0.000290695, 0.000287053, 0.000283001, 0.000276443, 0.000280483, 0.000263042)
Pos_twoweek <-c(0.000294824, 0.000292006, 0.000284735, 0.000293119, 0.000295799, 0.000291598, 0.000287946, 0.00028545, 0.000290695, 0.000292153, 0.000290695, 0.000290695, 0.000290695, 0.000287053, 0.000279903, 0.000271235, 0.000274071, 0.000263042)
Pos_threeweek <- c(0.000295001, 0.000294824, 0.000288088, 0.000293119, 0.000294824, 0.000294412, 0.000289534, 0.000283259, 0.000289534, 0.000290695, 0.000292153, 0.000290695, 0.000290695, 0.000287053, 0.000279903, 0.000266126, 0.00026837, 0.000251419)
Pos_fourweek <-c(0.000295178, 0.000295001, 0.000292268, 0.000294647, 0.000294824, 0.000293119, 0.000293031, 0.00028545, 0.000287946, 0.000289534, 0.000290695, 0.000292153, 0.000290695, 0.000287053, 0.000279903, 0.000266126, 0.000262787, 0.000241299)
differ_1 <-sum(Pos_nodelay-Pos_oneweek)/18
differ_2 <-sum(Pos_nodelay-Pos_twoweek)/18
differ_3 <-sum(Pos_nodelay-Pos_threeweek)/18
differ_4 <-sum(Pos_nodelay-Pos_fourweek)/18
Pos0 =c(0.000314758, 0.000317037, 0.000318901, 0.000322264, 0.000318901, 0.000318901, 0.000318901, 0.000318901, 0.000318901, 0.000322264, 0.000328364, 0.000336499, 0.000339035, 0.0003541, 0.000366871, 0.000375683, 0.000387084, 0.000388254, 0.000393303, 0.000394737, 0.000390423, 0.000385813, 0.000379127, 0.000387084, 0.000391865, 0.000405073, 0.000422787, 0.00041305, 0.000412504, 0.000402561, 0.000399017, 0.000379127, 0.000373961, 0.000356676, 0.000351073, 0.000345251, 0.000346751, 0.000343745, 0.000346751, 0.000339035, 0.000327914, 0.000326988)
Pos1 = c(0.000312823, 0.000319597, 0.000321221, 0.000326296, 0.000315987, 0.00031890, 0.000318901, 0.000318901, 0.000318901, 0.000326296, 0.000334621, 0.000348164, 0.000340213, 0.00037391, 0.00037997, 0.000383935, 0.000397697, 0.000394036, 0.000393303, 0.000394737, 0.000390423, 0.000375796, 0.000379127, 0.000392418, 0.000397861, 0.000412348, 0.000442246, 0.00041305, 0.000412504, 0.000394729, 0.000385941, 0.000369837, 0.00036292, 0.000349274, 0.000346989, 0.000340397, 0.000346751, 0.000342239, 0.000348411, 0.000333107, 0.000331794, 0.000316575)
Pos2 =c(0.000308579, 0.000317037, 0.000324396, 0.000329501, 0.000318901, 0.000315987, 0.000318901, 0.000318901, 0.000318901, 0.000326296, 0.000340809, 0.00035856, 0.000353009, 0.000376073, 0.000408279, 0.00040005, 0.00040809, 0.000405407, 0.000399383, 0.000394737, 0.000390423, 0.000375796, 0.000369837, 0.000392418, 0.000403786, 0.000419517, 0.000451675, 0.000431187, 0.000412504, 0.000394729, 0.000379276, 0.000360382, 0.000355431, 0.000341772, 0.0003408040, 0.000337137, 0.000341742, 0.000342239, 0.000346751, 0.000334298, 0.00032694, 0.000318905)
Pos3 =c(0.000310528, 0.000311412, 0.000321221, 0.000333878, 0.000321221, 0.000318901, 0.000315987, 0.000318901, 0.000318901, 0.000326296, 0.000340809, 0.00036876, 0.000364388, 0.000399224, 0.000411327, 0.000434494, 0.000428237, 0.000416521, 0.000411326, 0.000400901, 0.000390423, 0.000375796, 0.000369837, 0.000381693, 0.000403786, 0.00042658, 0.000460911, 0.000440001, 0.000430566, 0.000394729, 0.000379276, 0.000355591, 0.000347837, 0.000336714, 0.000334551, 0.00033221, 0.000338377, 0.000337696, 0.000346751, 0.000333107, 0.00032791, 0.000315991)
Pos4 =c(0.000310528, 0.000313997, 0.000314232, 0.000329501, 0.000324396, 0.000321221, 0.000318901, 0.000315987, 0.000318901, 0.000326296, 0.000340809, 0.00036876, 0.00037553, 0.000419381, 0.000443641, 0.000438171, 0.000470601, 0.000438007, 0.000422984, 0.000413005, 0.000396334, 0.000375796, 0.000369837, 0.000381693, 0.000391865, 0.00042658, 0.000469956, 0.000448649, 0.000439344, 0.000410271, 0.000379276, 0.000355591, 0.000344001, 0.00033161, 0.000330344, 0.000327243, 0.000333292, 0.000334648, 0.000341742, 0.000333107, 0.00032694, 0.000316575)
differ1 <-sum(Pos0 - Pos1)/42
differ2 <-sum(Pos0 - Pos2)/42
differ3 <-sum(Pos0 - Pos3)/42
differ4 <-sum(Pos0 - Pos4)/42
PPT = function(w){
q = (1-0.3)^w
p = 1 - q
P_plus = p*(1-False_negative(1)) + (1-p)*False_positive(1)
result = w/(1 + P_plus*w)
return(result)
}
pools <- w_opt_1(infect_rate/100)
pools
source("~/.active-rstudio-document", echo=TRUE)
Mat_total<-matrix(nrow= 6, ncol= 6)
Mat_total[1,] <- Zero_total
Mat_total[2,] <- One_total
Mat_total[3,] <- Two_total
Mat_total[4,] <-Three_total
Mat_total[5,] <- Four_total
Mat_total[6,] <- Five_total
heatmap(Mat_total, col=my_colors_3(100))
heatmap(Mat_total)
Mat_total<-matrix(nrow= 6, ncol= 6)
Mat_total[1,] <- Zero_total
Mat_total[2,] <- One_total
Mat_total[3,] <- Two_total
Mat_total[4,] <-Three_total
Mat_total[5,] <- Four_total
Mat_total[6,] <- Five_total
heatmap(Mat_total, col=my_colors_3(3))
heatmap(Mat_total)
Mat_total<-matrix(nrow= 6, ncol= 6)
Mat_total[1,] <- Zero_total
Mat_total[2,] <- One_total
Mat_total[3,] <- Two_total
Mat_total[4,] <-Three_total
Mat_total[5,] <- Four_total
Mat_total[6,] <- Five_total
heatmap(Mat_total, col=my_colors_3(100))
44/75
44/75*5
library(fmsb)
Symptomatic_proportion <-c(0, 0.1,   0.2,  0.3, 0.4,  0.5,  0.6,  0.7,  0.8,  0.9, 1)
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(100, 600) )
abline(h=407, col="#CC99FF")
abline(h=568, col="#660066")
Total_infections <-c(543, 501, 451,   404,  348,  300,  258,  232, 205,  189,  174)
plot(Symptomatic_proportion, Total_infections, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(100, 600) )
abline(h=272, col="#CC99FF")
abline(h=549, col="#660066")
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(150, 600) )
abline(h=407, col="#CC99FF")
abline(h=568, col="#660066")
Total_infections <-c(543, 501, 451,   404,  348,  300,  258,  232, 205,  189,  174)
plot(Symptomatic_proportion, Total_infections, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(150, 600) )
abline(h=272, col="#CC99FF")
abline(h=549, col="#660066")
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day" )
abline(h=407, col="#CC99FF")
abline(h=568, col="#660066")
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day" )
abline(h=407, col="#CC99FF")
abline(h=568, col="#660066")
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day" )
abline(h=407, col="#CC99FF")
abline(h=568, col="#660066")
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day", xlim=c(0,1) )
abline(h=407, col="#CC99FF")
abline(h=568, col="#660066")
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day" )
abline(h=407, col="#CC99FF")
abline(h=568, col="#660066")
Total_infections <-c(543, 501, 451,   404,  348,  300,  258,  232, 205,  189,  174)
plot(Symptomatic_proportion, Total_infections, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected total infections", ylim=c(150, 600), main="20 tests per day" )
abline(h=272, col="#CC99FF")
abline(h=549, col="#660066")
Length_pandemic<-c(143, 140, 135, 132, 120, 113, 108,  103, 94.9, 93.3, 89.6)
plot(Symptomatic_proportion, Length_pandemic, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected length of time from first infection to last (days)", ylim=c(50, 150) )
abline(h=116, col="#CC99FF")
abline(h=144, col="#660066")
Length_pandemic<-c(143, 140, 135, 132, 120, 113, 108,  103, 94.9, 93.3, 89.6)
plot(Symptomatic_proportion, Length_pandemic, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected length of time from first infection to last (days)", ylim=c(50, 150), main="5 tests per day" )
abline(h=116, col="#CC99FF")
abline(h=144, col="#660066")
Lef_pandemic<-c(144, 140, 136, 132, 118, 108,  95.1,  85.4, 74.3, 64.6,  57.0)
plot(Symptomatic_proportion, Lef_pandemic, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected length of time from first infection to last (days)", ylim=c(50, 150), main="20 tests per day")
abline(h=96.5, col="#CC99FF")
abline(h=145, col="#660066")
Peak_size<-c(65.2,  62.6, 60.1, 57.6, 57.5, 59.8, 56.9, 58.0, 58.0, 56.9, 56.9)
plot(Symptomatic_proportion, Peak_size, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected peak of infections",
ylim=c(50, 70), main="5 tests per day" )
abline(h=60.0, col="#CC99FF")
abline(h=65.7, col="#660066")
### For 20 tests/day - peak size
Size_of_Peak<-c(64.1, 61.5, 58.6, 57.4, 55.8, 54.2, 54.5, 54.6, 53.8, 53.6, 53.6)
plot(Symptomatic_proportion, Size_of_Peak, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected peak of infections", ylim=c(50,70), main="20 tests per day" )
abline(h=57.2, col="#CC99FF")
abline(h=64.5, col="#660066")
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day" )
abline(h=407, col="#CC99FF", lty=2)
abline(h=568, col="#660066", lty=2)
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day", lwd=2 )
abline(h=407, col="#CC99FF", lty=2, lwd=2)
abline(h=568, col="#660066", lty=2, lwd=2)
Total_infecrtions<-c(566, 521,  481,  451, 424,  414, 390,  383, 379, 364, 358)
plot(Symptomatic_proportion, Total_infecrtions, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected total infections", ylim=c(150, 600), main="5 tests per day", lwd=2 )
abline(h=407, col="#CC99FF", lty=2, lwd=2)
abline(h=568, col="#660066", lty=2, lwd=2)
Total_infections <-c(543, 501, 451,   404,  348,  300,  258,  232, 205,  189,  174)
plot(Symptomatic_proportion, Total_infections, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected total infections", ylim=c(150, 600), main="20 tests per day", lwd=2 )
abline(h=272, col="#CC99FF", lty=2, lwd=2)
abline(h=549, col="#660066", lty=2, lwd=2)
Length_pandemic<-c(143, 140, 135, 132, 120, 113, 108,  103, 94.9, 93.3, 89.6)
plot(Symptomatic_proportion, Length_pandemic, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected length of time from first infection to last (days)", ylim=c(50, 150), main="5 tests per day", lwd=2 )
abline(h=116, col="#CC99FF", lty=2, lwd=2)
abline(h=144, col="#660066", lty=2, lwd=2)
Lef_pandemic<-c(144, 140, 136, 132, 118, 108,  95.1,  85.4, 74.3, 64.6,  57.0)
plot(Symptomatic_proportion, Lef_pandemic, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected length of time from first infection to last (days)", ylim=c(50, 150), main="20 tests per day", lwd=2)
abline(h=96.5, col="#CC99FF", lty=2, lwd=2)
abline(h=145, col="#660066", lty=2, lwd=2)
Peak_size<-c(65.2,  62.6, 60.1, 57.6, 57.5, 59.8, 56.9, 58.0, 58.0, 56.9, 56.9)
plot(Symptomatic_proportion, Peak_size, type="l", xlab ="Proportion of Symptomatics", ylab ="Expected peak of infections",
ylim=c(50, 70), main="5 tests per day", lwd=2 )
abline(h=60.0, col="#CC99FF", lwd=2, lty=2)
abline(h=65.7, col="#660066", lwd=2, lty=2)
Size_of_Peak<-c(64.1, 61.5, 58.6, 57.4, 55.8, 54.2, 54.5, 54.6, 53.8, 53.6, 53.6)
plot(Symptomatic_proportion, Size_of_Peak, type="l", xlab ="Proportion of Symptomatics",
ylab ="Expected peak of infections", ylim=c(50,70), main="20 tests per day", lwd=2 )
abline(h=57.2, col="#CC99FF", lwd=2, lty=2)
abline(h=64.5, col="#660066", lwd=2, lty=2)
source("~/Library/CloudStorage/OneDrive-Personal/bethany/PhD/Pan_Code_4/network_functions9v2.R", echo=TRUE)
print(rate_from_source)
`%ni%` <- Negate(`%in%`)
set.seed(123)
#loading in the data
occupancy_data <- read_xls('/Users/bethanyheath/Downloads/ct08192011censushhtypehhsizeandageofusualresidentshouseholdsenglandandwales.xls',sheet=2)
`%ni%` <- Negate(`%in%`)
set.seed(123)
#loading in the data
occupancy_data <- read_xls('/Users/bethanyheath/Downloads/ct08192011censushhtypehhsizeandageofusualresidentshouseholdsenglandandwales.xls',sheet=2)
#rm(list=ls())
setwd('/Users/bethanyheath/OneDrive/bethany/PhD/Pan_Code_4')
#source('../Code/functions_network.R')
library(igraph)
library(truncnorm)
library(infotheo)
library(xtable)
library(RColorBrewer)
library(plotrix)
library(profvis)
library(funique)
library(doParallel)
library(foreach)
library(survival)
library(coxme)
library(pracma)
library(dplyr)
library(readxl)
#library(rethinking)
library(rBeta2009)
`%ni%` <- Negate(`%in%`)
set.seed(123)
#loading in the data
occupancy_data <- read_xls('/Users/bethanyheath/Downloads/ct08192011censushhtypehhsizeandageofusualresidentshouseholdsenglandandwales.xls',sheet=2)
#Naming the columns after the variables
colnames(occupancy_data) <- occupancy_data[9,]
#Removing the bit at the top of the document that was not needed
occupancy_data <- occupancy_data[-c(1:9),]
#renaming column name
occupancy_data$`Household Size`[occupancy_data$`Household Size`=="11 or more people in household"] <- '11 people or more'
#sums up the number of people in the household
occupancy_data$number <- as.numeric(sapply(occupancy_data$`Household Size`,function(x)strsplit(x,' p')[[1]][1]))
#getting rid of the blank NAs role from inbetween the i and i+1 sections
occupancy_data <- subset(occupancy_data,!is.na(number))
#The 11 plus section does not have the totals written in certain places so this is including them in
occupancy_data[286,5] <- as.character(6432)
occupancy_data[286,7] <- as.character(occupancy_data[286,8])
#Applying across the columns it takes the subset of whose number equals a certain value such as 1 takes their total and sums it. Essentially it is working out the number of households that have a certain number of inidividuals.
households <- sapply(1:10,function(y)sum(as.numeric(subset(occupancy_data,number==y)$Total)))
#This is doing a similar job to the previous question but is multiplying the household by the number of people.
people <- sapply(1:10,function(y)sum(as.numeric(subset(occupancy_data,number==y)$Total))*y)
#Just assigning a number to each of the cases.
occupancy_data$type <- 1:nrow(occupancy_data)
communal <- read_xls('/Users/bethanyheath/Downloads/communal_living.xls',sheet=1)
economic <- read_xls('/Users/bethanyheath/Downloads/communal_living_economic.xls',sheet=1)
#Previous section was about loading in the data that will be used to build the model.
#Next stage is about creating the network that will be used to build the model.
#set the number of households to 500
number_of_households <- 500
#set up the type for these 500 household by choosing based on the probability taken from the data already loaded in
household_types <- sample(occupancy_data$type,number_of_households,replace=T,prob=occupancy_data$Total)
#renaming variables
colnames(occupancy_data)[1:4] <- c('description','children','adults','elderly')
#setting the size of the household based on what type of household was chosen
household_sizes <- occupancy_data$number[household_types]
label_start <- 0
#hh is a list with the number of households there are then says to make a  full graph then set vertex attribution to the initial start plus household sizes.
hh <- list()
for(i in 1:number_of_households) {
hh[[i]] <- make_full_graph(household_sizes[i]) %>%
set_vertex_attr("name", value = label_start+1:household_sizes[i])
label_start <- label_start + household_sizes[i]
}
# extract household data frames
attrs <- do.call(rbind,lapply(hh,function(x)igraph::as_data_frame(x,'vertices')))
# combine all
el <- do.call(rbind,lapply(hh,function(x)igraph::as_data_frame(x)))
# convert to network
new_g <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
# save layout for plotting
pts <- 80
save_layout <- layout_nicely(induced.subgraph(new_g,1:pts))
# add household labels
hh_labels <- rep(1:number_of_households,household_sizes)
#setting the vertex attributes to what has been worked out
new_g <- set_vertex_attr(new_g,'hh',value=hh_labels)
#ego finds the vertices not further from the neighbourhood of the vertices
household_list <<- lapply(V(new_g),function(x) {cs <- as.vector(unlist(ego(new_g,order=1,nodes=x))); cs[cs!=x]})
#combining the houses together including the children adults and eldery together.
house_makeup <- lapply(2:nrow(occupancy_data)-1,function(x)as.numeric(c(occupancy_data$children[occupancy_data$type==x],
occupancy_data$adults[occupancy_data$type==x],
occupancy_data$elderly[occupancy_data$type==x])))
#for the residents they have find the number of the residents for each of the number of households. Setting up measures given which household are together.                                                                         occupancy_data$elderly[occupancy_data$type==x])))
demographic_index <- rep(0,length(V(new_g)))
for(i in 1:number_of_households){
residents <- which(hh_labels==i)
occupants <- house_makeup[[household_types[i]]]
labels <- rep(1:3,times=occupants)
demographic_index[residents] <- labels
}
demographic_index <<- demographic_index
#code to assign ages to the children, adults and eldery sections
min_age <- c(0,10,20,30,40,50,60,70,80)
max_age <- c(9,19,29,39,49,59,69,79,150)
cfr <- c(0.002,0.006,0.03,0.08,0.15,0.6,2.2,5.1,9.3)/100
grouped_cfr <<- c(mean(cfr[1:2]),mean(cfr[3:7]),mean(cfr[8:9]))
tune <<- grouped_cfr/max(grouped_cfr)
#states the number of indivduals in the samples that are children, adults and elderly.
paste0(sum(demographic_index==1),' children')
paste0(sum(demographic_index==2),' adults')
paste0(sum(demographic_index==3),' elderly')
# Next section is about creating work connections between individuals. In the current code this does not take into account: children and eldery not working, communal/institutional living, social
#Next section is counting how many individuals are working
#Create a new measure that will be used to count this up
worker_index <- rep(0,length(demographic_index))
#Next each adult is considered to be in the working population. This is easily adjustable by adding a probability into this.
worker_index[demographic_index==2] <- 1
#Elders are considered in the population but only those that would be below a certain age therefore to take this into account, we get:
worker_index[demographic_index==3&runif(length(worker_index))<0.2] <- 1
#Calculating the number working from summing this measure calculated
n_adults <- sum(worker_index)
# number of workplaces calculated using a rpois distribution using information from https://www.hse.gov.uk/contact/faqs/toilets.htm
number_workplaces <- rpois(1,n_adults/15)
#setting up for the workplace index
workplace_index <- rep(0,length(V(new_g)))
#takes a sample from the number of workplaces for the number of adults who work there are in the sample therefore each working member gets assigned a number for their workplace
workplace_index[worker_index==1] <- sample(1:number_workplaces,n_adults,replace=T)
#add in work connections into the model which works by looking at people who work in the same workplace adds connections between them.
for(i in 1:number_workplaces) {
workers <- which(workplace_index==i)
if(length(workers)>1)
for(j in 2:length(workers))
for(k in 1:(j-1)){
new_g <- add_edges(new_g,edges=c(workers[j],workers[k]))
}
}
## Children in classrooms
young_people <- V(new_g)[demographic_index==1]
Number_classes <- rpois(1, length(young_people)/25)
School_index <- rep(0, length(V(new_g)))
School_index[demographic_index==1] <- sample(1:Number_classes, length(young_people), replace=T)
for(i in 1:Number_classes) {
pupils <- which(School_index==i)
if(length(pupils)>1)
for(j in 2:length(pupils))
for(k in 1:(j-1)){
new_g <- add_edges(new_g,edges=c(pupils[j],pupils[k]))
}
}
par(mar=c(1,1,1,1))
plot(induced.subgraph(new_g,1:pts),layout=save_layout,
vertex.label=NA,vertex.size=10,vertex.color=c('white',"#660066","#CC99FF")[demographic_index[1:pts]])
legend('topleft',legend=c('<19','19-65','>65'),pt.cex=2,col='black',pch=21, pt.bg=c('white',"#660066","#CC99FF"),bty='n')
#Plotting graph of the connections
#plot.igraph(new_g,vertex.label=NA,vertex.size=1,layout=save_layout)
#Looking at the size of the clusters
cluster_sizes <- sapply(V(new_g),function(x)ego_size(new_g,order=2,nodes=x))
#hist(cluster_sizes,main='',xlab='Cluster size')
#looking at the degree distribution
degreedistribution <- degree.distribution(new_g)*length(E(new_g))
#works out the average contacts per person
average_contacts <- sum(degreedistribution*c(1:length(degreedistribution)-1)/length(E(new_g)))
length(E(new_g))/length(V(new_g))*2
#lists the people that each individual has contact with in the model
contact_list <<- lapply(V(new_g),function(x) {cs <- as.vector(unlist(ego(new_g,order=1,nodes=x))); cs[cs!=x]})
#creates list of those who are contacts of the person's contacts
contact_of_contact_list <<- lapply(V(new_g),function(x) {
cs <- as.vector(unlist(ego(new_g,order=1,nodes=x)));
cofcs <- as.vector(unlist(ego(new_g,order=2,nodes=x)));
ccs <- funique(c(cs,cofcs))
ccs[ccs!=x]
})
## generate random edges network for random transmission
#random graph as according to the Erdos-Renyi model every edge created with the same constant probability in this caser the probabilityu is 10/length of vertices
random_g <- sample_gnp(length(V(new_g)), 10/length(V(new_g)))
#creates a list of all the vertices that they are attached to as a result of these random interactions
random_list <<- lapply(V(random_g),function(x) {cs <- as.vector(unlist(ego(random_g,order=1,nodes=x))); cs[cs!=x]})
## Changes going to add to Rob's model - adding in children going to class, adding in random connections to simulate social connection and adding in big events
social_g <<- new_g
social_g <- add_edges(social_g, edges=c(1,2))
for (i in 1:1650){
listing_one <-sample(V(social_g),11000, replace = TRUE)
listing_two <- sample(V(social_g), 11000, replace = TRUE)
one_pair <-unlist(unname(as.list(listing_one[i])))
two_pair<-unlist(unname(as.list(listing_two[i])))
social_g <-add_edges(social_g, edges = c(one_pair, two_pair))
}
## adding in random connections to simulate social connections
#for (i in 1:1100) {
#  first_person <- sample(V(social_g),1100, replace = TRUE)
#  second_person <- sample(V(social_g),1100, replace = TRUE)
#  first <- first_person[i]
#  second <- second_person[i]
#  if (first ==! second){
#  social_g <- add_edges(social_g,edges=c(first, second))
#  }
#}
# actually gonna have to move this up so that it is above as will want contacts of contacts to do with this.
social_list <<- lapply(V(social_g),function(x) {cs <- as.vector(unlist(ego(social_g,order=1,nodes=x))); cs[cs!=x]})
## simulating big event 1
# attendees <- sample(V(social_g), 100)
# for (j in 2:length(attendees))
#   for (k in 1:(j-1)){
#     big_event_g <- add_edges(social_g, edges=c(attendees[j], attendees[k]))
#   }
## simulating big event 2
# attendees_2 <- sample(V(big_event_g), 50)
# for (j in 2:length(attendees_2))
#   for (k in 1:(j-1)){
#     big_event_2_g <- add_edges(big_event_g, edges=c(attendees_2[j], attendees_2[k]))
#   }
plot(induced.subgraph(social_g,1:pts),layout=save_layout,
vertex.label=NA,vertex.size=10,vertex.color=c('white',"#660066","#CC99FF")[demographic_index[1:pts]])
legend('topleft',legend=c('<19','19-65','>65'),pt.cex=2,col='black',pch=21, pt.bg=c('white',"#660066","#CC99FF"),bty='n')
source("~/Library/CloudStorage/OneDrive-Personal/bethany/PhD/Pan_Code_4/Set_up_code2.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-Personal/bethany/PhD/Pan_Code_4/Set_up_code2.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-Personal/bethany/PhD/Pan_Code_4/Set_up_code2.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-Personal/bethany/PhD/Pan_Code_4/Set_up_code2.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-Personal/bethany/PhD/Pan_Code_4/Set_up_code2.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-Personal/bethany/PhD/Pan_Code_4/Set_up_code2.R", echo=TRUE)
